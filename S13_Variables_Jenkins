#!/bin/bash 

### If you assign a name to data then that is called as variable 

## VARNAME=DATA

Count=10
Class=DevOps

## Following are the characters allowed in variable names.
# 1. character a-z, A-Z 
# 2. 0-9 numbers 
# 3. Underscore is also allowed 

### None of any other character are not allowed to keep in a script like . - ? 
### Also a variable should not start with a number 

## Access a variable data by using variable name preceding with $ character. Also you can access variable with flower brackets as well , ${VARNAME}

echo "Welcome to $Class Training and Strength is $Count"
echo "Welcoem to ${Class} Training and Strength is ${Count}"

## Properties of a variable 
# 1. ReadWrite  --> ReadOnly  <- We are not discussing
# 2. Local      --> Environment 
# 3. Scalar     --> Arrays <- We are not discussing


## Demo on Local variables 
## Declare a variable on shell and try to access that variable in script 
## On Shell CLASS=DEVOPS
## Now to convert the above variable to environment variable then we have to use export command.
## export CLASS=DEVOPS

echo "Welcome to $CLASS TRAINING"

### Sometimes we need to declare variables during runtime 
## FOr ex some statements can go wrong if we declare variable directly in script 

echo "Today date is 2019-08-12"

## We need to get that date dynamically from script 
## For that situations we have variable substitutions

# 1. Command Substitution 
    ## Variable will be declared by executing a command and O/P goes to a variable 
    ## VAR=$(COMMAND)
# 2. Arithematic Substitution
    ## Variable will be declared by solving a arithematic expression.
    ## VAR=$((ARTH-EXPRESSION))


DATE=$(date +%F)
echo "Today date is $DATE"

ADD=$((2+3))
echo "ADD of 2 and 3 = $ADD" 

===========================================================================================================
Read Input:

#!/bin/bash 

## Take input from user and store inside a variable 
read -p 'Enter Your Name: ' name 
read -p 'Enter your Course: ' course 

## Some times we need to read some secret content like passwords 
read -s -p 'Enter  your Password: ' pass

## I am going to print those variables 

echo -e "\n\nHello $name, Welcome to $course Training, Your Password is $pass"

## Read command will not allow a scope of automation, Means it is going to read the input from the user manually, 
In case of automation a user cannot be giving those inputs and your script will be a failure.
Hence we prefer the inputs using special variable more and more for automation , but not read command.

=============================================================================================================
Special-vars

### Special variables are $0. $1, $2 .... $n, $*, $@. $# , $$ $?

## What is $0 , $0 is nothing but the script name.. Inside script if you want to know the script name you are using then $0 can help

echo Script Name = $0 

## What is $1 , First argument to the script is $1
echo First Argument to script is $1 

## What is $* & $&, All arguments parsed to the script 

echo All arguments = $* 
echo All arguments = $@ 


## What is $# , Number of arguments parsed to script 
echo Number of Arguments = $#


echo "Hello $1 , Welcome to $2 Training , Your Password is $3"

===========================================================
Redirectors:

for o/p: >    # ls >/tmp/out     Here, o/p of ls command will be stored in location /tmp/out
for i/p: <    #sudo mysql -t </tmp/sql   Here, input will be provided by /tmp/sql location

========================================================
Jenkins Installation:

$ sudo yum install java -y 
$ sudo wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo
$ sudo rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io.key
$ sudo yum install jenkins -y 
$ sudo systemctl enable jenkins 
$ sudo systemctl start jenkins

