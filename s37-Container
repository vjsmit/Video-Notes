Docker is to run the container from the images.
Conatiners provide lots of flexiblity.
All the images are pre-defined and available at hub.docker.com
Installing a container: (07:00 - )
  from docs.docker.com
$ docker ps  (It will show all the docker running comtainers)
$ docker ps -a  (It will show the container which are stopped also)

ps cmd - It will show the running process
If we want to run some service on container, we have to provide image
  $ docker run -d httpd
   - Here, we are running httpd. -d option to run in background
   
 Every, container will have internal ip add bcoz its like a virtual machine
 $ docker inspect <container id>
 $ curl ipconfig.co - to get the public ip add of the machine
 
 $ docker run -p host port:container port container image
 $ docker run -p 80:80 httpd
 80 port is open for container and not for the machine. So, whatever container we run we have to expose to the outside world
 -p otion is to publish the port, map 80 port of my host machine to my container port 80.
    Its like mapping host port no. to my container port no.
    
 $ docker rm -f <container_id>    (to remove the container forcefully)
 
 $ docker exec <Container_id> cat <content>  (to get the content inside the container)
 
 Jenkins admin user create groovy (19:00 - )
 
# How to make our own images using docker file (20:00 -- )
     docker file reference - it will have few intructions
     init.d is a standard location of our system which is going to execute at the time of booting of the system.
  - In order to make any of the image, we have to choose a base image
  - $ docker build -t user_name/image_name:image  - to build the image
  - but the image we created is local. We can use it only in the system
  - $ docker images   - it wil show list of images
  - since images we built is local we can only run the container in local machine
  - to use it in central we have to do docker push as well for that we have to login to our dockerhub account
  - $ docker login
  - $ docker push user_name/image_name:image
  - $ docker logs -f <C_id>     - to follow the logs
  
 # How to pass some env_variable into the container  (31:00 --)
    -  $ docker run centos env   ----to see the variables
    -  $ docker run -d -p 80:8080 -e admin_user=admin -e admin_pwd=admin user_name/image_name:image
  
 
Plugins (53:00)
