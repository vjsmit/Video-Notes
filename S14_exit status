# ls -ld /opt /opt1 >/tmp/out 2>/tmp/err        

        command o/p in /tmp/out
        error o/p   in /tmp/err
  
 To save both command and error in same location:
 
          ls -ld /opt /opt1 &>/tmp/out
          
  When we dont want to save o/p and error then we redirect it in /dev/null        
  
           ls -ld /opt &>/dev/null
           
           

# Any command we execute is going to send the exit status to the shell and from that status we can validate whether the command is sucessfully executed or not.

## Exit status is a number 

# Exit states ranges from 0-255

# 0 is globally successful 
# 1-255 is a failure or partially failure or partialy successful 


# As a author of a your own shell scripts you can use the exit status from 1-125
# 125+ are used by system and it is not preferred to use by the user.

## You can send your own exit status by using exit command 

exit 5

## TO refer the exit status we use a variable ?, TO access a ? variable we use $? 

man command will have more description about the command
==================================================================================================================
Quotes:  (29:00 - 40:00)

#!/bin/bash 

echo * 

### Usually keyboard characters other than a-z, 0-9 , _ other than these characters we have more characters like * () and so on are called as special characters . 

## Those special characters are having a special purpose in the system like $ to access a variable 

## Some times this speciual characters need to be avoided and the inputs should be given avoiding their speciality 

# TO do that we have quotes 
## 1. Single Quotes 
#        No Special Characters are treated as special in single quotes 
## 2. Double Quotes 
#        Only $ , ` are treated a special characters and rest other are normal.

ls -ld /opt /opt1 &>/dev/null 
echo 'Exit Status of ls command = $?'

ls -ld /opt /opt1 &>/dev/null 
echo "Exit Status of ls command = $?"

echo "*"

# With out quotes also we can escape special character by using \ 
echo \*

echo -e Hello\\nWorld

## Even in double quotes sometimes you need to skip the speciality of chaaracters 
echo  "Cost of apple is \$100"

==========================================================================================================================
Functions: (41:00 - 55:00 )

#!/bin/bash 

# if we assign a name to a set of data then it is called as a variable 
# if we assign a name to a set of commands then it is called as a function 

# there are four types of commands, function is one of them 
## 1. Binaries which are stored in system location like /bin 
## 2. Functions 
## 3. Alias     e.g. (alias G="git pull --all")
## 4. Shell-Builtin

[ root@ip-172-31-34-13 ~/ShellScript_Aug ]# type ls
ls is aliased to `ls --color=auto'
[ root@ip-172-31-34-13 ~/ShellScript_Aug ]# which ls
alias ls='ls --color=auto'
 /usr/bin/ls

## Declare a function 
samplex() {
    echo Hello 
    echo Bye
}

## Call the function 
samplex 

## Function is a command and hence we can parse the inputs 
sampley() {
    echo First Argumnent = $1 
    echo Second Argument = $2
}

sampley 10 98 

## Function is a command and hence it has exit status as well , 
   but we cannot use exit command because it exits the complete script where as for function to come out we use return command 
   and status is same like exit command ranges from 0-255 

sample_stat() {
    echo Hello 
    return 20
    echo Bye 
}
echo "Status of function = $?"

## Variables in main program can be accessed by functions and vice-versa

sample_vars() {
    af=100
    echo "Value of am=$am"
}

am=200 
sample_vars
echo "Value of af=$af"


## Some times we want to limit the variable in function to be accessible only inside function

sample_local() {
    local a2=100 
    echo "Value of a2 in function = $a2 "
}

sample_local
echo "Value of a2 in main program = $a2 "
================================================================================================================================================
Conditions: (57:00 - 01:03:00)

action=$1
## Color Codes 
R="\e[31m"
N="\e[0m"

case $action in 
    start) 
        echo -e "Starting the service"
        ;; 
    stop) 
        echo -e "Stopping the service"
        ;;
    *)
        echo "Usage:: $0 start|stop"
        echo -e "\t ${R}start${N} -> Start the service"
        echo -e "\t ${R}stop${N}  -> Stop the service"
        exit 1
        ;;
esac

============================================================================================================================
if (01:05:00 - )

#!/bin/bash 

# Simple-If 
# If-Else 
# Else-If

## Refer this URL for syntaxes 
# https://www.geeksforgeeks.org/conditional-statements-shell-script/ 

## Expresssion are categerized in threee 
# 1. String Operators   = , != , == 
# Ex : [ a = a ] , [ a != $a ]

## 2. String operators -eq , -ne, -gt, -ge, -le, -lt
## 3. File operators 
## Refer: https://www.tutorialspoint.com/unix/unix-file-operators.htm


action=$1

if [ "$action" = "start" ]; then 
    echo "Starting the service"
elif [ "$action" = "stop" ]; then 
    echo "Stopping the service"
else 
    echo "Usage:: $0 start|stop"
    echo -e "\t ${R}start${N} -> Start the service"
    echo -e "\t ${R}stop${N}  -> Stop the service"
    exit 1
fi


ls -ld /opt /opt1 &>/dev/null 
if [ $? -eq 0 ]; then 
    echo "Successful"
else 
    echo Failure 
    exit 2 
fi 


