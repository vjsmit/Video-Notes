(1) When conditions (01:00 -- 09:10)
        e.g. when: ansible_distribution == "CentOS"
        
(2) Ignore Errors (09:30 --)
      => ignore_errors: yes
      => Even if there is a failure, ansible will not stop there. It will take us further
      => rc is like exit status. If 0, then successful or else failure
      
 (3) Tags (13:30 --18:00)
       - when we want to run the specific tasks and not all the tasks
       - tags is grouping of tasks
       => tags:
           - one
       - on cli we have to use -t option followed by tags
  
 (4) Loops (18:30 -- 32:30)
       - when same task needs to excecuted mutiple times
       - msg: "Hello, {{item}}"
         loop:
           - raju
           - kaju
           - baju
        - msg: "Hello {{item}}"
          loop:
           ["One", "Two"]
           ["New", "Old"]  
           
        - msg: "Hello {{item[0]}} & Hello {{item[1]}}"
          loop:
            ["one" "two"]
            ["Ram" "Shyam"]
            
(5) Filters (33:00 -- 49:00 )
      - $ uptime | xargs -n1 (to view uptime o/p list wise)
      - .split() function we use in ansible/python to split a string to a list. e.g. {{out.stdout.split()}}
       
(6) Email service (50:00 -- 01:08:50)

(7) stack.yml (01:09:00 -- )

(8) Roles (01:12:00)
      - Roles are ways of automatically loading certain vars_files, tasks, and handlers based on a known file structure.
      - Grouping content by roles also allows easy sharing of roles with other users
      - Purpose of role is to maintain code in proper structure
      - Roles expect files to be in certain directory name. Roles must include at least one of these directories, 
        however it is perfectly fine to exclude any which are not being used. 
        When in use, each directory must contain a main.yml file, which contains the relevant content:
        
                tasks - contains the main list of tasks to be executed by the role.
                handlers - contains handlers, which may be used by this role or even anywhere outside this role.
                defaults - default variables for the role (low priority variables).
                vars - other variables for the role.
                files - contains files which can be deployed via this role.
                templates - contains templates which can be deployed via this role.
                meta - defines some meta data for this role.
        
     - Example project structure:

        site.yml
        webservers.yml
        fooservers.yml
        roles/
            common/
                tasks/
                handlers/
                files/
                templates/
                vars/
                defaults/
                meta/
            webservers/
                tasks/
                defaults/
                meta/
                
   Modules:
      include_role => will include complete role
      include      => will include play after another play
      
